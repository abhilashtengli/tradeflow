
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Buyer
  Seller
}


enum ContainerType {
  Type_20 
  Type_40
}

enum confirmFreightBooking { 
  accepted
  rejected
}

enum Unit {
  pcs
  box
  kg 
  grams
  tons
  cm
  meter
  inch
  feet
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  CANCELLED
}

enum Currency {
  USD 
  EURO
  GBP
  INR
  RUB
  CNY
}

enum TruckType {
  Flatbed_Truck
  Box_Truck 
  Pickup_Truck
  Refrigerated_Truck
  Car_Carrier_Truck
  Tow_Truck
  Heavy_Hauler
  Curtain_Side_Truck
}
enum LoadUnit {
  tons
  Kilograms 
  Pounds 
}

model User {

id                   String       @id @default(uuid())
name                 String
email                String @unique
password             String
role                 Role
country              String     @default("India") 
product              Product[]
transportation       Transportation[] 
freightBookings      FreightBooking[]
createdAt            DateTime @default(now())
updatedAt            DateTime @updatedAt
productQuoteAsBuyer  ProductQuote[]  @relation("ProductQuoteBuyer")
productQuoteAsSeller ProductQuote[] @relation("ProductQuoteSeller")
ProductBookingAsSeller       ProductBooking[] @relation("productBuyer")
productBookingAsBuyer ProductBooking[] @relation("productSeller")
freightQuote          FreightQuote[]
}

model UserTransporter {
  id             String  @id @default(uuid())
  name           String
  email          String  @unique
  password       String
  role           String  @default("transporter")
  companyName    String?
  country        String?
  transportation Transportation[] 
  companyAddress  String?
}

model Product{

  id            String    @id @default(uuid())
  name          String    @unique
  description   String
  category      String
  unit          Unit
  quantity      Int
  productOrigin String
  price         Float
  user          User      @relation(fields: [userId], references: [id])
  userId        String 
  country       String    // Country of origin or where it's available
  isAvailable   Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  currency      Currency?
  productBooking ProductBooking[]
  productQuote ProductQuote[]
}

model ProductBooking {
  id                        String        @id @default(uuid())
  orderDate                 DateTime      @default(now())
  quoteId                   String?           // Reference to the original quote ID
  buyer                     User          @relation("productBuyer", fields: [buyerId], references: [id])
  buyerId                   String
  seller                    User          @relation("productSeller", fields: [sellerId], references: [id])
  sellerId                  String        
  shippingAddress           String
  billingAddress            String?
  product                   Product       @relation(fields: [productId], references: [id]) 
  productId                 String 
  quantity                  Int
  noOfDaystoDeliver         Int?
  buyerConfirm              Boolean       @default(false)
  bookingConfirm            Boolean       @default(false)
  isDispatched              Boolean       @default(false)
  isDelivered               Boolean       @default(false)
  totalPrice                Float         @default(0)
  paymentStatus             PaymentStatus @default(PENDING)
  containerTypeBooked       ContainerType?   
  noOfContainersBooked      Int?   
  currency                  Currency?
  departureDate             DateTime?
  expectedArrivalDate       DateTime?
  deliveredDate             DateTime?
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt
}

model ProductQuote {
  id                        String          @id @default(uuid())
  product                   Product         @relation( fields: [productId], references: [id]) 
  productId                 String
  paymentTerms              String?
  Buyer                     User            @relation("ProductQuoteBuyer", fields: [buyerId], references: [id]) 
  buyerId                   String
  Seller                    User            @relation("ProductQuoteSeller", fields: [sellerId], references: [id]) // Relation to User (Seller)
  sellerId                  String           
  currency                  Currency?
  portOfOrigin              String?
  price                     Float?
  noOfDaystoDeliver         Int?
  pendingQuotes             Boolean       @default(true)
  buyerBookingConfirmed     Boolean       @default(false)
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt @default(now())
}

model Transportation {
  id                 String           @id @default(uuid())
  type               TruckType         
  load               Int 
  loadUnit           LoadUnit 
  origin             String           // Pickup location
  destination        String           // Port or destination location
  distance           Int              @default(0)
  price              Float            @default(0)
  user               User             @relation(fields: [userId], references: [id])
  userId             String             // Foreign key to track which user booked the transport
  transporter        UserTransporter? @relation( fields: [transporterId], references: [id])
  transporterId      String?          @default("not yet accepted ")
  userConfirmBooking Boolean          @default(false)
  accepted           Boolean          @default(false)
  paymentStatus      PaymentStatus    @default(PENDING)
  dispatched         Boolean          @default(false)
  delivered          Boolean          @default(false)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model FreightForwarder {
  id              String             @id @default(uuid())
  name            String         
  companyName     String?         
  companyAddress  String?         
  role            String             @default("FreightForwarder")
  email           String             @unique
  password        String
  freightQuote    FreightQuote[]
  country         String?
  freightBookings   FreightBooking[]
}

model FreightBooking {
  id                  String                  @id @default(uuid())
  freightForwarder    FreightForwarder        @relation(fields: [freightForwarderId], references: [id])
  freightForwarderId  String                  @default("not yet accepted ")
  user                User                    @relation(fields: [userId], references: [id])
  userId              String
  containerType       ContainerType   
  noOfContainers      Int      
  load                Int                  //load in tons
  origin              String    
  destination         String 
  product             String?
  productUnit         Unit
  freightQuote        FreightQuote[]
  paymentStatus       PaymentStatus?          @default(PENDING)
  departureDate       DateTime
  price               Float?         
  dispatched          Boolean                 @default(false) 
  isDelivered         Boolean                 @default(false)     
  arrivalDate         DateTime?               @default(now())
  freightIsAccepted   Boolean                 @default(false)
  userConfirm         confirmFreightBooking?            
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
}  

model FreightQuote  {
  id                   String               @id @default(uuid()) 
  freightForwarder     FreightForwarder     @relation(fields: [freightForwarderId], references: [id])
  freightForwarderId   String 
  freightBooking       FreightBooking       @relation(fields: [bookingId], references: [id])
  bookingId            String
  user                 User                 @relation(fields: [userId], references: [id])
  userId               String
  price                Float?
  isAccepted           Boolean?
  currency             Currency?
  pendingQuote        Boolean              @default(true)

}

