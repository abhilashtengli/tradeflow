
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {

id                   String       @id @default(uuid())
name                 String
email                String @unique
password             String
role                 Role
country              String     @default("India") 
product              Product[]
transportation       Transportation[] 
freightBookings      FreightBooking[]
createdAt            DateTime @default(now())
updatedAt            DateTime @updatedAt
ProductBooking       ProductBooking[]
productQuoteAsBuyer  ProductQuote[]  @relation("ProductQuoteBuyer")
productQuoteAsSeller ProductQuote[] @relation("ProductQuoteSeller")
}

model UserTransporter {
  id             String  @id @default(uuid())
  name           String
  email          String  @unique
  password       String
  role           String  @default("transporter")
  companyName    String?
  country        String?
  transportation Transportation[] 
  companyAddres  String?
}

model Product{

  id            String    @id @default(uuid())
  name          String
  description   String
  category      String
  unit          Unit
  quantity      Int
  productOrigin String
  price         Float
  user          User      @relation(fields: [userId], references: [id])
  userId        String 
  country       String    // Country of origin or where it's available
  isAvailable   Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  productBooking ProductBooking[]
}

model ProductBooking {
  id               String        @id @default(uuid())
  orderDate        DateTime      @default(now())
  deliveryDate     DateTime?     // Optional, if buyer specifies desired delivery date
  quoteId          Int           // Reference to the original quote ID
  user             User          @relation(fields: [userId], references: [id])
  userId           String
  buyerId          Int
  shippingAddress  String
  billingAddress   String
  productId        String
  product          Product       @relation(fields: [productId], references: [id]) 
  paymentStatus    PaymentStatus @default(PENDING)
  totalAmount      Float
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model ProductQuote {
  id                 String          @id @default(uuid())
  productId          String
  paymentTerms       String?
  Buyer              User            @relation("ProductQuoteBuyer", fields: [buyerId], references: [id]) 
  buyerId            String
  Seller             User            @relation("ProductQuoteSeller", fields: [sellerId], references: [id]) // Relation to User (Seller)
  sellerId           String           //userId whose role is Seller 
  currency           Currency?
  portOfOrigin       String?
  price              Float?
}

model Transportation {
  id                 String          @id @default(uuid())
  type               String          // e.g., "Truck", "Rail", "Air"
  load               Int
  origin             String          // Pickup location
  destination        String          // Port or destination location
  distance           Int             @default(0)
  price              Float           @default(0)
  user               User            @relation(fields: [userId], references: [id])
  userId             String             // Foreign key to track which user booked the transport
  transporter        UserTransporter @relation( fields: [transporterId], references: [id])
  transporterId      String          @default("not yet accepted ")
  accepted           Boolean         @default(false)
  dispatched         Boolean         @default(false)
  delivered          Boolean         @default(false)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
}

model FreightForwarder {
  id              String             @id @default(uuid())
  name            String         
  companyName     String?         
  companyAddress  String?         
  role            String             @default("FreightForwarder")
  email           String             @unique
  password        String
  freightQuote    FreightQuote[]
  country         String?
  location        String?   // Based on country or region
  freightBookings   FreightBooking[]
}

model FreightBooking {
  id                  String               @id @default(uuid())
  freightForwarder    FreightForwarder     @relation(fields: [freightForwarderId], references: [id])
  freightForwarderId  String               @default("not yet accepted ")
  user                User                 @relation(fields: [userId], references: [id])
  userId              String
  containerType       ContainerType   
  noOfContainers      Int      
  load                Int                  //load in tons
  origin              String    
  destination         String 
  freightQuote        FreightQuote[]
  departureDate       DateTime
  price               Float?         
  dispatched          Boolean                 @default(false)      
  arrivalDate         DateTime?               @default(now())
  freightIsAccepted   Boolean                 @default(false)
  userConfirm         confirmFreightBooking?            
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
}  

model FreightQuote  {
  id                   String               @id @default(uuid()) 
  freightForwarder     FreightForwarder     @relation(fields: [freightForwarderId], references: [id])
  freightForwarderId   String 
  freightBooking       FreightBooking       @relation(fields: [bookingId], references: [id])
  bookingId            String
  price                Float
  isAccepted           Boolean?
}

enum Role {
  Buyer
  Seller
}


enum ContainerType {
  Type_20 
  Type_40
}

enum confirmFreightBooking { 
  accepted
  rejected
}

enum Unit {
  pcs
  box
  kg 
  grams
  tons
  cm
  meter
  inche
  feet
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  CANCELLED
}

enum Currency {
  USD 
  EURO
  GBP
  INR
  RUB
  CNY
}